package appconfig

import (
	"github.com/google/uuid"
	"github.com/ksensehq/eventnative/geo"
	"github.com/ksensehq/eventnative/logging"
	"github.com/ksensehq/eventnative/useragent"
	"github.com/spf13/viper"
	"io"
	"log"
	"strings"
)

type AppConfig struct {
	ServerName string
	Authority  string
	C2STokens  map[string]bool
	S2STokens  map[string]bool
	//both
	AuthorizedTokens map[string]bool

	GeoResolver geo.Resolver
	UaResolver  useragent.Resolver

	SynchronizationServiceType     string
	SynchronizationServiceEndpoint string

	closeMe []io.Closer
}

var Instance *AppConfig

func setDefaultParams() {
	viper.SetDefault("server.port", "8001")
	viper.SetDefault("server.static_files_dir", "./web")
	viper.SetDefault("geo.maxmind_path", "/home/eventnative/app/res/")
	viper.SetDefault("log.path", "/home/eventnative/logs/events")
	viper.SetDefault("log.show_in_server", false)
	viper.SetDefault("log.rotation_min", "5")
}

func Init() error {
	setDefaultParams()

	serverName := viper.GetString("server.name")
	if serverName == "" {
		serverName = "unnamed-server"
	}

	if err := logging.InitGlobalLogger(logging.Config{
		LoggerName:  "main",
		ServerName:  serverName,
		FileDir:     viper.GetString("server.log.path"),
		RotationMin: viper.GetInt64("server.log.rotation_min"),
		MaxBackups:  viper.GetInt("server.log.max_backups")}); err != nil {
		log.Fatal(err)
	}

	log.Println(" *** Creating new AppConfig *** ")
	log.Println("Server Name:", serverName)
	publicUrl := viper.GetString("server.public_url")
	if publicUrl == "" {
		log.Println("Server public url: will be taken from Host header")
	} else {
		log.Println("Server public url:", publicUrl)
	}

	var appConfig AppConfig
	appConfig.ServerName = serverName

	port := viper.GetString("port")
	if port == "" {
		port = viper.GetString("server.port")
	}
	appConfig.Authority = "0.0.0.0:" + port

	geoResolver, err := geo.CreateResolver(viper.GetString("geo.maxmind_path"))
	if err != nil {
		log.Println("Run without geo resolver", err)
	}
	appConfig.GeoResolver = geoResolver
	appConfig.UaResolver = useragent.NewResolver()

	//authorization
	authorizedTokens := map[string]bool{}
	c2sTokens := map[string]bool{}
	s2sTokens := map[string]bool{}
	// 1. user auth from config
	authTokensArr := viper.GetStringSlice("server.auth")
	for _, token := range authTokensArr {
		trimmed := strings.TrimSpace(token)
		if trimmed != "" {
			authorizedTokens[trimmed] = true
			c2sTokens[trimmed] = true
		}
	}
	// 2. s2s auth from config
	s2sTokensArr := viper.GetStringSlice("server.s2s_auth")
	for _, s2sToken := range s2sTokensArr {
		trimmed := strings.TrimSpace(s2sToken)
		if trimmed != "" {
			authorizedTokens[trimmed] = true
			s2sTokens[trimmed] = true
		}
	}
	if len(authorizedTokens) == 0 {
		// 3. autogenerated
		generatedToken := uuid.New().String()
		authorizedTokens[generatedToken] = true
		c2sTokens[generatedToken] = true
		s2sTokens[generatedToken] = true
		log.Println("Empty 'server.tokens' config key. Auto generate token:", generatedToken)
	}

	appConfig.AuthorizedTokens = authorizedTokens
	appConfig.C2STokens = c2sTokens
	appConfig.S2STokens = s2sTokens

	// Synchronization service
	appConfig.SynchronizationServiceType = viper.GetString("synchronization_service.type")
	appConfig.SynchronizationServiceEndpoint = viper.GetString("synchronization_service.endpoint")

	Instance = &appConfig
	return nil
}

func (a *AppConfig) ScheduleClosing(c io.Closer) {
	a.closeMe = append(a.closeMe, c)
}

func (a *AppConfig) Close() {
	for _, cl := range a.closeMe {
		if err := cl.Close(); err != nil {
			log.Println(err)
		}
	}
}
